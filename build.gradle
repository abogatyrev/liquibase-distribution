apply from: 'properties.gradle'

buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.netflix.nebula:gradle-ospackage-plugin:${gradleOspackagePlugin}"
    }
}

apply plugin: 'nebula.ospackage'
apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            name 'distribution'
            url 'http://nexus.avbsoft.org/repository/distributions/'
            allowInsecureProtocol true

            credentials {
                username = "${nexusUsername}"
                password = "${nexusPassword}"
            }
        }
    }
    publications {
        rpm(MavenPublication) {
//                def distributionPackageVersion = project.version.toString().replace("-SNAPSHOT", "~SNAPSHOT")
            artifacts {
                artifact("${buildDir}/distributions/${distributionPackageName}-${project.version}-${distributionPackageRelease}.noarch.rpm") {
                    artifactId "${distributionPackageName}"
                    classifier 'noarch'
                    extension 'rpm'
                    version "${project.version}-${distributionPackageRelease}"
                }
            }
            pom {
                packaging = 'rpm'
                groupId = "${project.group}"
                version = "${project.version}-${distributionPackageRelease}"
            }
        }
    }
}

def distributionTags = ['liquibase']

// in case of conflicts need to use: rpm -iv --replacefiles rpm_name.rpm
ospackage {
    packageName = "${distributionPackageName}"
    version = "${project.version}"
    release = "${distributionPackageRelease}"

    user = 'wildfly'
    permissionGroup = 'wildfly'

    os = LINUX
    type = BINARY

    license = "${distributionPackageLicense}"
    url = "${distributionPackageUrl}"
    sourcePackage = '-'

    packager = 'A. Bogatyrev'
    buildHost = '-'

    packageDescription = "${distributionPackageDescription}"

    distributionTags.each {
        provides("$it")
    }

    requires('java')

    into('/opt/liquibase')
    from('/resources/liquibase')

    postInstall file('/resources/rpm/scripts/postInstall.sh')
}