buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.netflix.nebula:gradle-ospackage-plugin:${gradleOspackagePlugin}"
        classpath "com.netflix.nebula:nebula-publishing-plugin:${nebulaPublishingPluginVersion}"
    }
}

apply plugin: 'maven'
apply plugin: 'nebula.ospackage'

def distributionTags = ['liquibase']

// in case of conflicts need to use: rpm -iv --replacefiles rpm_name.rpm
ospackage {
    packageName = "${distributionPackageName}"
    version = "${distributionPackageVersion}"
    release = "${distributionPackageRelease}"
    user = 'root'

    os = LINUX
    type = BINARY

    license = "${distributionPackageLicense}"
    url = "${distributionPackageUrl}"
    sourcePackage = '-'

    packager = 'Andrey Bogatyrev'
    buildHost = 'localhost'
    packageDescription = "${distributionPackageDescription}"

    distributionTags.each {
        provides("$it")
    }

    requires('java')

    into '/opt/liquibase'

    from("/resources/liquibase") {}

    postInstall file('/resources/rpm/scripts/postInstall.sh')
}

apply from: 'properties.gradle'

// upload RPM distributions packages to the Nexus
// see: https://medium.com/dot-debug/deploying-artifacts-to-maven-using-gradle-b669acc1b6f8
configurations {
    distributions
}
artifacts {
    distributions file: new File("${buildDir}/distributions", "${distributionPackageName}-${distributionPackageVersion}-${distributionPackageRelease}.noarch.rpm"),
            name: "${distributionPackageName}", type: 'rpm', classifier: 'noarch'
}
uploadDistributions {
    description 'Uploads the RPM distributions.'
    group 'publishing'
    repositories {
        mavenDeployer {
            configuration = configurations.distributions
            repository(url: 'http://nexus.avbsoft.org/repository/wildfly-distributions/') {
                authentication(userName: "${nexusUsername}", password: "${nexusPassword}")
            }
            pom.version = "${distributionPackageVersion}-${distributionPackageRelease}"
            pom.whenConfigured { pom -> pom.dependencies.clear() } // not need dependencies...
        }
    }
}

task buildAndPublish(dependsOn: [buildRpm, uploadDistributions]) {}
uploadDistributions.mustRunAfter([buildRpm])

task Wrapper(type: Wrapper) { // run > gradle wrapper
    gradleVersion = "${gradleVersion}"
}